"""
Django settings for legal_accord project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from typing import List


# Basic configuration

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# This is directory containing the project and app directories.

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

DEBUG = True if os.getenv('DJANGO_DEBUG') == 'True' else False

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')  # type: List[str]

INTERNAL_IPS = os.getenv('DJANGO_INTERNAL_IPS', '').split(',')  # type: List[str]

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')

ROOT_URLCONF = 'legal_accord.urls'

WSGI_APPLICATION = 'legal_accord.wsgi.application'

AUTH_USER_MODEL = 'unravel.User'

# Applications
# https://docs.djangoproject.com/en/2.1/ref/applications/

INSTALLED_APPS = [
    'django_celery_beat',
    'django_celery_results',
    'django.contrib.admindocs',
    'django.contrib.humanize',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'unravel',
]

if DEBUG:
    INSTALLED_APPS.append('debug_toolbar')
    INSTALLED_APPS.append('django_extensions')


# Middleware
# https://docs.djangoproject.com/en/2.1/topics/http/middleware/

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    csrf_index = MIDDLEWARE.index('django.middleware.csrf.CsrfViewMiddleware')
    MIDDLEWARE.insert(csrf_index + 1, 'debug_toolbar.middleware.DebugToolbarMiddleware')

# Templates
# https://docs.djangoproject.com/en/2.1/ref/settings/#std:setting-TEMPLATES

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Cookies
# NOTE: change the name to match the app name, as the port is not included in the SESSION_COOKIE_DOMAIN

SESSION_COOKIE_NAME = 'unravel_session_id'

CSRF_COOKIE_NAME = 'unravel_csrftoken'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.getenv('DJANGO_DATABASE_NAME'),
        'USER': os.getenv('DJANGO_DATABASE_USER'),
        'PASSWORD': os.getenv('DJANGO_DATABASE_PASSWORD'),
        'HOST': os.getenv('DJANGO_DATABASE_HOST', 'localhost'),
        'PORT': int(os.getenv('DJANGO_DATABASE_PORT', '5432')),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-au'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGE_COOKIE_NAME = 'unravel_django_language'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = os.getenv('DJANGO_STATIC_URL')
STATIC_ROOT = os.getenv('DJANGO_STATIC_ROOT')
STATICFILES_STORAGE = os.getenv('DJANGO_STATICFILES_STORAGE')

MEDIA_URL = os.getenv('DJANGO_MEDIA_URL')
MEDIA_ROOT = os.getenv('DJANGO_MEDIA_ROOT')

# Cache
# https://docs.djangoproject.com/en/2.1/ref/settings/#caches

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.getenv('DJANGO_CACHE_LOCATION'),
    }
}

# Security and HTTPS and CSRF
# https://docs.djangoproject.com/en/2.1/ref/middleware/#http-strict-transport-security
# https://docs.djangoproject.com/en/2.1/ref/csrf/
# https://docs.djangoproject.com/en/2.1/ref/clickjacking/

# SECURE_HSTS_SECONDS: If your entire site is
# served only over SSL, you may want to consider setting a value and enabling HTTP Strict Transport Security. Be sure
# to read the documentation first; enabling HSTS carelessly can cause serious, irreversible problems.
SECURE_HSTS_SECONDS = int(os.getenv('DJANGO_SECURE_HSTS_SECONDS', 0))

# SECURE_CONTENT_TYPE_NOSNIFF: When false, your pages will not be served with
# an 'x-content-type-options: nosniff' header. You should consider enabling this header to prevent the browser from
# identifying content types incorrectly.
SECURE_CONTENT_TYPE_NOSNIFF = True if os.getenv('DJANGO_SECURE_CONTENT_TYPE_NOSNIFF', 'False') == 'True' else False

# SECURE_BROWSER_XSS_FILTER: When false, your pages will not be served with an 'x-xss-protection: 1; mode=block' header.
# You should consider enabling this header to activate the browser's XSS filtering and help prevent XSS attacks.
SECURE_BROWSER_XSS_FILTER = True if os.getenv('DJANGO_SECURE_BROWSER_XSS_FILTER', 'False') == 'True' else False

# SECURE_SSL_REDIRECT: Unless your site should be available over
# both SSL and non-SSL connections, you may want to either set this setting True or configure a load balancer or
# reverse-proxy server to redirect all connections to HTTPS.
SECURE_SSL_REDIRECT = True if os.getenv('DJANGO_SECURE_SSL_REDIRECT', 'False') == 'True' else False

# SESSION_COOKIE_SECURE: Using a secure-only session cookie makes it more difficult
# for network traffic sniffers to hijack user sessions.
SESSION_COOKIE_SECURE = True if os.getenv('DJANGO_SESSION_COOKIE_SECURE', 'False') == 'True' else False

# CSRF_COOKIE_SECURE: Using a secure-only CSRF cookie makes it more difficult for network traffic sniffers
# to steal the CSRF token.
CSRF_COOKIE_SECURE = True if os.getenv('DJANGO_CSRF_COOKIE_SECURE', 'False') == 'True' else False

# CSRF_COOKIE_HTTPONLY: Using an HttpOnly CSRF cookie makes it more difficult for cross-site scripting
# attacks to steal the CSRF token.
CSRF_COOKIE_HTTPONLY = True if os.getenv('DJANGO_CSRF_COOKIE_HTTPONLY', 'False') == 'True' else False

# CSRF_HEADER_NAME: The name of the request header used for CSRF authentication.
CSRF_HEADER_NAME = os.getenv('DJANGO_CSRF_HEADER_NAME', 'HTTP_X_CSRFTOKEN')

# X_FRAME_OPTIONS: Could be set to 'DENY'. The default is 'SAMEORIGIN', but unless there is a good reason for your
# site to serve other parts of itself in a frame, you should change it to 'DENY'.
X_FRAME_OPTIONS = os.getenv('DJANGO_X_FRAME_OPTIONS', 'DENY')

# Logging
# https://docs.djangoproject.com/en/2.1/topics/logging

LOGGING_DIR = os.getenv('DJANGO_LOG_DIR')
LOGGING_LEVEL = os.getenv('DJANGO_LOG_LEVEL')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] [%(levelname)8s] - %(name)s - %(message)s [%(process)d:%(processName)s %(thread)d:%(threadName)s] (%(filename)s:%(lineno)s)'
        },
        'standard': {
            'format': '[%(asctime)s] [%(levelname)8s] - %(message)s'
        },
    },
    'handlers': {
        'app_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'app.log'),
            'formatter': 'standard'
        },
        'django_fallback_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_framework.log'),
            'formatter': 'verbose'
        },
        'django_request_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_request.log'),
            'formatter': 'standard'
        },
        'django_security_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_security.log'),
            'formatter': 'standard'
        },
        'django_template_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_template.log'),
            'formatter': 'standard'
        },
        'django_db_log': {
            'level': LOGGING_LEVEL,
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOGGING_DIR, 'django_db.log'),
            'formatter': 'standard'
        }
    },
    'loggers': {
        'unravel': {
            'handlers': ['app_log'],
            'level': LOGGING_LEVEL,
            'propagate': True,
        },
        '': {
            'handlers': ['django_fallback_log'],
            'level': LOGGING_LEVEL,
            'propagate': True
        },
        'django': {
            'handlers': ['django_fallback_log'],
            'level': LOGGING_LEVEL,
            'propagate': False
        },
        'django.request': {
            'handlers': ['django_request_log'],
            'level': LOGGING_LEVEL,
            'propagate': False
        },
        'django.template': {
            'handlers': ['django_template_log'],
            'level': LOGGING_LEVEL,
            'propagate': False
        },
        'django.db': {
            'handlers': ['django_db_log'],
            'level': LOGGING_LEVEL,
            'propagate': False
        },
        'django.security': {
            'handlers': ['django_security_log'],
            'level': LOGGING_LEVEL,
            'propagate': False
        }
    }
}

# Celery
# http://docs.celeryproject.org/en/latest/userguide/configuration.html

CELERY_RESULT_BACKEND = 'django-db'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
